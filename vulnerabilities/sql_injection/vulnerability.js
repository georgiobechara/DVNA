// Choosing not to introduce additional dependencies for vulnerabilities. These will go in challenge mode.
// var mysql = require('mysql');
var express = require('express');
// var args = require('minimist')(process.argv);
var dvna = express();

/*
if(!args.u || !args.d || !args.p) { 
  console.log('This example requires the ' + '-u (user), ' +
  '-d (mysql db) and ' +
  '-p (password) command line variables');
  process.exit();
}

var connection = mysql.createConnection({ 
  host : 'localhost',
  user : args.u,
  database : args.d,
  password : args.p,
  multipleStatements: true
});

connection.connect();

dvna.get('/', function (req, res) { 
  res.send('ok');
});

dvna.get('/:name', function(req, res, next){
  connection.query('SELECT * FROM accounts WHERE name="' + req.params.name + '"', function(err, rows, fields) { // <-- name parameter is unsanitized. $$$
    if (err) {
      next(err);
    return; 
  }
    res.send(JSON.stringify(rows));
  });
});

dvna.listen(3002);
*/

module.exports = {
  title: 'SQL Injection (SQLi)',
  server: dvna
}